/**
@mainpage Introduction

This document forms the reference manual for the Burn In Unit based on the Texas Instruments F2802x.

This system has been implemented using several Texas Instruments libraries; 
digital power v3.1, SGen V1.01, IQMath v1.5c and SQMath. 
Please refer to the TI documentation pertaining to those libraries and to the C28x device to understand their operation.

This system also uses the System for Standard Commands for Programmable Instruments for C28x, again, 
refer to the documentation pertaining to that system to understand its use.

#### General Operation
This system operates using the concept of a state machine with multiplexed threading. This allows important tasks, 
such as signal generation and the monitoring of critical parameters to take precedence
while still allowing other less critical tasks to run with acceptable frequency.
This is allowed by creating several threads DPL, A, B and C and iterating them at different interval periods, 
such that every time the thread is iterated the next single task in that thread is run.

##### Fast (DPL) Thread
The DPL thread is the fastest thread, is coded in assembly and consists of only two tasks. 
It is the only thread that uses an interrupt to iterate. 
Thus the tasks are formed by an interrupt service routine (ISR).
This allows the DPL thread to interrupt the ongoing action of any of the other threads. 
This means that as long as the length of time each of the tasks take to execute is less than the interval time, 
then the threads operation will be deterministic. 
It is within this thread's two tasks that the critical and time-sensitive actions of the program are carried out.
The thread ISR is triggered by a start of conversion (SOC) signal from the master enhanced pulse width modulation (ePWM) 
peripheral.
This occurs at a frequency of 33 kHz.
As there are two tasks on the thread, the frequency of each task is 16.5 kHz resulting in a period of 60us.   

##### Sequential Iteration Threads
The remaining threads (A, B, C) iterate by checking the rollover state of different CPU timers. 
Their operation and iteration is sequential and so less deterministic.
The outline of the handling sequential iteration threads by the state machine is illustrated by the flow diagram below, 
where N and n rollover to A and 0, respectively whenever they reach their maximum value. 

@image html state_machine_loop.png
<!---
@image latex state_machine_loop.eps "Sequential iteration thread state machine" width=\textwidth
--->

The frequency of tasks can be determined from the period of the interval timers using the following equation, 
where *n* is the number of tasks in the thread and *T<sub>in</sub>* is the interval timer period.
@f[
	f_{ta}=
	\frac{1}{T_{in} \times n}
@f]
With interval periods such that *T<sub>A</sub>* `<` *T<sub>B</sub>* `<` *T<sub>A</sub>* this results in the flow of execution 
illustrated by the following diagram.

@image html seq_state_machine_task_itr.png
<!---
@image latex seq_state_machine_task_itr.eps "Sequence of thread tasks" width=\textwidth
--->

#### Digital Power Control
The control of the power, voltage and current is managed using control loop logic, normally one loop for each stage (Transformer, 
AC, each of the four loads).
These control loops are formed from a set of macros and helper functions.

Each of these macros acts as a block of functionality, much like a black-box electronic component, 
allowing their terminals to be wired together in the required order with nets. 
Once initialised and configured, or connected, correctly the macro blocks are executed, sequentially, 
by calling the appropriate code from an assembly ISR.
In this case, this is what forms the DPL ISR tasks.
Each block performs a precisely defined computation and delivers the result to the appropriate net-list variables.
Each control loop's net vairables and operation parameter variables are grouped together and stored in a structure 
(channelParameters), with one such structure for each control loop. 

The basic use of macros that are available within the program can be broken down into three parts:
1.	Initialisation: the macro blocks are initialised from the program by using a C callable function, 
     DPL_Init(), which is contained within the assembly file DPL_ISR.asm. 
2.	Configuration: C pointers of the macro block terminals are assigned to net nodes to form the desired control structure, 
     i.e., the control loop.
3.	Execution: Macro block code is executed in the assembly ISR, DPL_ISR().

##### Boost Load Control
The figure below shows a diagram that illustrates the macro and net view of the control loop for one of the load boost converter 
stages.
The loop depicted is current controlled. 
It uses a macro to retrieve a reading from an ADC peripheral to obtain a value that indicates the level of the current at the low 
side of the load input, CHANn I<sub>SNS</sub>.
This value is used as the feedback into a 2-pole 2-zero filter macro where it is compared to the reference value and the output 
value is varied up or down, using the filter coefficients, as necessary. 
This output value is then used by another macro to set the duty of the ePWM peripheral that controls the switching of the 
converter, CHANn PWM.

Another macro retrieves a value from a second ADC that represents the voltage level across the load input, CHANn V<sub>SNS</sub>. 
A task in one of the sequential iteration threads compares this value to the user-set allowable voltage limit, the OVP limit. 
If the value is above this limit the control loop output is disabled and an over-current protection alert is raised.
  
@image html boost_load_loop.png
<!---
@image latex boost_load_loop.eps "Macro view of control loop for single boost load loop" width=\textwidth
--->

##### Inter-Boost Control
The figure below shows a diagram that illustrates the macro and net view of the control loop for the inter-boost, or "middle",
boost converter stage.
The loop depicted is voltage controlled. 
It uses a macro to retrieve a reading from an ADC peripheral a value that indicates the level of the voltage across the stage 
output, DC HV V<sub>SNS</sub>.
This value is used as the feedback into a 3-pole 3-zero filter macro where it is compared to the reference value and the output 
value is varied up or down, using the filter coefficents, as necessary.
This output value is then used by another macro to set the duty of the ePWM peripheral that controls the switching of the 
converter, INTBST PWM.

Another macro retrieves a value from a second ADC that represents the current level at the low side of the input, 
DC MID I<sub>SNS</sub>.
An on-board analogue comparator compares this value against the user-set allowable current limit, the OCP limit.
If the value is above this limit the comparator output sets the related trip-zone, quickly disabling the control loop output in 
software and hardware, HV EN.

@image html boost_xfmr_loop.png
<!---
@image latex boost_xfmr_loop.eps "Macro view of control loop for inter-boost loop" width=\textwidth
--->

*/